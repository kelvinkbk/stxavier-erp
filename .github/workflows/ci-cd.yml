name: üöÄ St. Xavier ERP - CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality & Testing
  quality-check:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üõ°Ô∏è Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: üìù TypeScript check
        run: npx tsc --noEmit

      - name: üßπ Lint check
        run: npm run lint
        continue-on-error: true

      - name: üß™ Run tests
        run: npm test
        continue-on-error: true

  # Web Build & Deploy
  web-deploy:
    name: üåê Web Build & Deploy
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üèóÔ∏è Build web version (Demo Mode)
        if: ${{ secrets.FIREBASE_API_KEY == '' }}
        run: |
          echo "üîß Building in demo mode (Firebase secrets not configured)"
          npm run build:web
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: demo-api-key
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: demo-project.firebaseapp.com
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: demo-project
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: demo-project.appspot.com
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: 123456789
          EXPO_PUBLIC_FIREBASE_APP_ID: demo-app-id
          EXPO_PUBLIC_ENVIRONMENT: demo

      - name: üèóÔ∏è Build web version (Production)
        if: ${{ secrets.FIREBASE_API_KEY != '' }}
        run: npm run build:web
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          EXPO_PUBLIC_ENVIRONMENT: production

      - name: üöÄ Deploy to Vercel
        if: ${{ secrets.VERCEL_TOKEN != '' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./

      - name: ‚ö†Ô∏è Deployment skipped
        if: ${{ secrets.VERCEL_TOKEN == '' }}
        run: |
          echo "üîß Deployment skipped: Vercel secrets not configured"
          echo "üìù To enable deployment, add these secrets to your repository:"
          echo "   - VERCEL_TOKEN"
          echo "   - ORG_ID"
          echo "   - PROJECT_ID"
          echo "   - FIREBASE_API_KEY"
          echo "   - FIREBASE_AUTH_DOMAIN"
          echo "   - FIREBASE_PROJECT_ID"
          echo "   - FIREBASE_STORAGE_BUCKET"
          echo "   - FIREBASE_MESSAGING_SENDER_ID"
          echo "   - FIREBASE_APP_ID"

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: dist/
          retention-days: 7

  # Mobile Build Check
  mobile-check:
    name: üì± Mobile Build Check
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üì± Expo Doctor
        run: npx expo doctor
        continue-on-error: true

      - name: üèóÔ∏è Check Expo build (Demo Mode)
        if: ${{ secrets.FIREBASE_API_KEY == '' }}
        run: npx expo export --platform all --output-dir build-check
        continue-on-error: true
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: demo-api-key
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: demo-project.firebaseapp.com
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: demo-project
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: demo-project.appspot.com
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: 123456789
          EXPO_PUBLIC_FIREBASE_APP_ID: demo-app-id
          EXPO_PUBLIC_ENVIRONMENT: demo

      - name: üèóÔ∏è Check Expo build (Production)
        if: ${{ secrets.FIREBASE_API_KEY != '' }}
        run: npx expo export --platform all --output-dir build-check
        continue-on-error: true
        env:
          EXPO_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          EXPO_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          EXPO_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          EXPO_PUBLIC_ENVIRONMENT: production

  # Performance Monitoring
  performance-check:
    name: ‚ö° Performance Analysis
    runs-on: ubuntu-latest
    needs: web-deploy

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üì¶ Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: dist/

      - name: üìä Bundle size analysis
        run: |
          echo "üì¶ Analyzing bundle size..."
          du -sh dist/
          find dist/ -name "*.js" -exec wc -c {} + | sort -n | tail -10
          echo "üìä Top 10 largest JavaScript files:"
          find dist/ -name "*.js" -exec ls -lah {} + | sort -k5 -hr | head -10
        continue-on-error: true

      - name: ‚ö° Performance test
        run: npm run performance:test
        continue-on-error: true

  # Security Scan
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: üì§ Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Notification
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: [web-deploy, mobile-check, performance-check, security-scan]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: üìß Notify deployment status
        run: |
          echo "üéâ St. Xavier ERP deployment pipeline completed!"
          echo "‚úÖ Web: ${{ needs.web-deploy.result }}"
          echo "üì± Mobile: ${{ needs.mobile-check.result }}"
          echo "‚ö° Performance: ${{ needs.performance-check.result }}"
          echo "üõ°Ô∏è Security: ${{ needs.security-scan.result }}"
          echo ""
          if [[ "${{ secrets.FIREBASE_API_KEY }}" != "" ]]; then
            echo "üî• Firebase: Production configuration detected"
          else
            echo "üîß Firebase: Demo mode (add secrets for production)"
          fi
          if [[ "${{ secrets.VERCEL_TOKEN }}" != "" ]]; then
            echo "üöÄ Vercel: Deployment enabled"
          else
            echo "üìù Vercel: Add VERCEL_TOKEN secret to enable deployment"
          fi
